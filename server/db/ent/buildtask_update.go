// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/bishopfox/sliver/server/db/ent/buildtask"
	"github.com/bishopfox/sliver/server/db/ent/implant"
	"github.com/bishopfox/sliver/server/db/ent/implantprofile"
	"github.com/bishopfox/sliver/server/db/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// BuildTaskUpdate is the builder for updating BuildTask entities.
type BuildTaskUpdate struct {
	config
	hooks      []Hook
	mutation   *BuildTaskMutation
	predicates []predicate.BuildTask
}

// Where adds a new predicate for the builder.
func (btu *BuildTaskUpdate) Where(ps ...predicate.BuildTask) *BuildTaskUpdate {
	btu.predicates = append(btu.predicates, ps...)
	return btu
}

// SetStarted sets the Started field.
func (btu *BuildTaskUpdate) SetStarted(t time.Time) *BuildTaskUpdate {
	btu.mutation.SetStarted(t)
	return btu
}

// SetCompleted sets the Completed field.
func (btu *BuildTaskUpdate) SetCompleted(t time.Time) *BuildTaskUpdate {
	btu.mutation.SetCompleted(t)
	return btu
}

// AddImplantIDs adds the Implant edge to Implant by ids.
func (btu *BuildTaskUpdate) AddImplantIDs(ids ...int) *BuildTaskUpdate {
	btu.mutation.AddImplantIDs(ids...)
	return btu
}

// AddImplant adds the Implant edges to Implant.
func (btu *BuildTaskUpdate) AddImplant(i ...*Implant) *BuildTaskUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return btu.AddImplantIDs(ids...)
}

// AddImplantProfileIDs adds the ImplantProfile edge to ImplantProfile by ids.
func (btu *BuildTaskUpdate) AddImplantProfileIDs(ids ...int) *BuildTaskUpdate {
	btu.mutation.AddImplantProfileIDs(ids...)
	return btu
}

// AddImplantProfile adds the ImplantProfile edges to ImplantProfile.
func (btu *BuildTaskUpdate) AddImplantProfile(i ...*ImplantProfile) *BuildTaskUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return btu.AddImplantProfileIDs(ids...)
}

// Mutation returns the BuildTaskMutation object of the builder.
func (btu *BuildTaskUpdate) Mutation() *BuildTaskMutation {
	return btu.mutation
}

// RemoveImplantIDs removes the Implant edge to Implant by ids.
func (btu *BuildTaskUpdate) RemoveImplantIDs(ids ...int) *BuildTaskUpdate {
	btu.mutation.RemoveImplantIDs(ids...)
	return btu
}

// RemoveImplant removes Implant edges to Implant.
func (btu *BuildTaskUpdate) RemoveImplant(i ...*Implant) *BuildTaskUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return btu.RemoveImplantIDs(ids...)
}

// RemoveImplantProfileIDs removes the ImplantProfile edge to ImplantProfile by ids.
func (btu *BuildTaskUpdate) RemoveImplantProfileIDs(ids ...int) *BuildTaskUpdate {
	btu.mutation.RemoveImplantProfileIDs(ids...)
	return btu
}

// RemoveImplantProfile removes ImplantProfile edges to ImplantProfile.
func (btu *BuildTaskUpdate) RemoveImplantProfile(i ...*ImplantProfile) *BuildTaskUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return btu.RemoveImplantProfileIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (btu *BuildTaskUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(btu.hooks) == 0 {
		affected, err = btu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BuildTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			btu.mutation = mutation
			affected, err = btu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(btu.hooks) - 1; i >= 0; i-- {
			mut = btu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, btu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (btu *BuildTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := btu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (btu *BuildTaskUpdate) Exec(ctx context.Context) error {
	_, err := btu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (btu *BuildTaskUpdate) ExecX(ctx context.Context) {
	if err := btu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (btu *BuildTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   buildtask.Table,
			Columns: buildtask.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: buildtask.FieldID,
			},
		},
	}
	if ps := btu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := btu.mutation.Started(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: buildtask.FieldStarted,
		})
	}
	if value, ok := btu.mutation.Completed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: buildtask.FieldCompleted,
		})
	}
	if nodes := btu.mutation.RemovedImplantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   buildtask.ImplantTable,
			Columns: []string{buildtask.ImplantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := btu.mutation.ImplantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   buildtask.ImplantTable,
			Columns: []string{buildtask.ImplantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := btu.mutation.RemovedImplantProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   buildtask.ImplantProfileTable,
			Columns: []string{buildtask.ImplantProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantprofile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := btu.mutation.ImplantProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   buildtask.ImplantProfileTable,
			Columns: []string{buildtask.ImplantProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantprofile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, btu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{buildtask.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BuildTaskUpdateOne is the builder for updating a single BuildTask entity.
type BuildTaskUpdateOne struct {
	config
	hooks    []Hook
	mutation *BuildTaskMutation
}

// SetStarted sets the Started field.
func (btuo *BuildTaskUpdateOne) SetStarted(t time.Time) *BuildTaskUpdateOne {
	btuo.mutation.SetStarted(t)
	return btuo
}

// SetCompleted sets the Completed field.
func (btuo *BuildTaskUpdateOne) SetCompleted(t time.Time) *BuildTaskUpdateOne {
	btuo.mutation.SetCompleted(t)
	return btuo
}

// AddImplantIDs adds the Implant edge to Implant by ids.
func (btuo *BuildTaskUpdateOne) AddImplantIDs(ids ...int) *BuildTaskUpdateOne {
	btuo.mutation.AddImplantIDs(ids...)
	return btuo
}

// AddImplant adds the Implant edges to Implant.
func (btuo *BuildTaskUpdateOne) AddImplant(i ...*Implant) *BuildTaskUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return btuo.AddImplantIDs(ids...)
}

// AddImplantProfileIDs adds the ImplantProfile edge to ImplantProfile by ids.
func (btuo *BuildTaskUpdateOne) AddImplantProfileIDs(ids ...int) *BuildTaskUpdateOne {
	btuo.mutation.AddImplantProfileIDs(ids...)
	return btuo
}

// AddImplantProfile adds the ImplantProfile edges to ImplantProfile.
func (btuo *BuildTaskUpdateOne) AddImplantProfile(i ...*ImplantProfile) *BuildTaskUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return btuo.AddImplantProfileIDs(ids...)
}

// Mutation returns the BuildTaskMutation object of the builder.
func (btuo *BuildTaskUpdateOne) Mutation() *BuildTaskMutation {
	return btuo.mutation
}

// RemoveImplantIDs removes the Implant edge to Implant by ids.
func (btuo *BuildTaskUpdateOne) RemoveImplantIDs(ids ...int) *BuildTaskUpdateOne {
	btuo.mutation.RemoveImplantIDs(ids...)
	return btuo
}

// RemoveImplant removes Implant edges to Implant.
func (btuo *BuildTaskUpdateOne) RemoveImplant(i ...*Implant) *BuildTaskUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return btuo.RemoveImplantIDs(ids...)
}

// RemoveImplantProfileIDs removes the ImplantProfile edge to ImplantProfile by ids.
func (btuo *BuildTaskUpdateOne) RemoveImplantProfileIDs(ids ...int) *BuildTaskUpdateOne {
	btuo.mutation.RemoveImplantProfileIDs(ids...)
	return btuo
}

// RemoveImplantProfile removes ImplantProfile edges to ImplantProfile.
func (btuo *BuildTaskUpdateOne) RemoveImplantProfile(i ...*ImplantProfile) *BuildTaskUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return btuo.RemoveImplantProfileIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (btuo *BuildTaskUpdateOne) Save(ctx context.Context) (*BuildTask, error) {

	var (
		err  error
		node *BuildTask
	)
	if len(btuo.hooks) == 0 {
		node, err = btuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BuildTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			btuo.mutation = mutation
			node, err = btuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(btuo.hooks) - 1; i >= 0; i-- {
			mut = btuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, btuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (btuo *BuildTaskUpdateOne) SaveX(ctx context.Context) *BuildTask {
	bt, err := btuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return bt
}

// Exec executes the query on the entity.
func (btuo *BuildTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := btuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (btuo *BuildTaskUpdateOne) ExecX(ctx context.Context) {
	if err := btuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (btuo *BuildTaskUpdateOne) sqlSave(ctx context.Context) (bt *BuildTask, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   buildtask.Table,
			Columns: buildtask.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: buildtask.FieldID,
			},
		},
	}
	id, ok := btuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing BuildTask.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := btuo.mutation.Started(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: buildtask.FieldStarted,
		})
	}
	if value, ok := btuo.mutation.Completed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: buildtask.FieldCompleted,
		})
	}
	if nodes := btuo.mutation.RemovedImplantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   buildtask.ImplantTable,
			Columns: []string{buildtask.ImplantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := btuo.mutation.ImplantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   buildtask.ImplantTable,
			Columns: []string{buildtask.ImplantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := btuo.mutation.RemovedImplantProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   buildtask.ImplantProfileTable,
			Columns: []string{buildtask.ImplantProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantprofile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := btuo.mutation.ImplantProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   buildtask.ImplantProfileTable,
			Columns: []string{buildtask.ImplantProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantprofile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	bt = &BuildTask{config: btuo.config}
	_spec.Assign = bt.assignValues
	_spec.ScanValues = bt.scanValues()
	if err = sqlgraph.UpdateNode(ctx, btuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{buildtask.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return bt, nil
}
