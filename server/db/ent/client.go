// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/bishopfox/sliver/server/db/ent/migrate"

	"github.com/bishopfox/sliver/server/db/ent/buildtask"
	"github.com/bishopfox/sliver/server/db/ent/implant"
	"github.com/bishopfox/sliver/server/db/ent/implantprofile"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// BuildTask is the client for interacting with the BuildTask builders.
	BuildTask *BuildTaskClient
	// Implant is the client for interacting with the Implant builders.
	Implant *ImplantClient
	// ImplantProfile is the client for interacting with the ImplantProfile builders.
	ImplantProfile *ImplantProfileClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.BuildTask = NewBuildTaskClient(c.config)
	c.Implant = NewImplantClient(c.config)
	c.ImplantProfile = NewImplantProfileClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:         cfg,
		BuildTask:      NewBuildTaskClient(cfg),
		Implant:        NewImplantClient(cfg),
		ImplantProfile: NewImplantProfileClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:         cfg,
		BuildTask:      NewBuildTaskClient(cfg),
		Implant:        NewImplantClient(cfg),
		ImplantProfile: NewImplantProfileClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		BuildTask.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.BuildTask.Use(hooks...)
	c.Implant.Use(hooks...)
	c.ImplantProfile.Use(hooks...)
}

// BuildTaskClient is a client for the BuildTask schema.
type BuildTaskClient struct {
	config
}

// NewBuildTaskClient returns a client for the BuildTask from the given config.
func NewBuildTaskClient(c config) *BuildTaskClient {
	return &BuildTaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `buildtask.Hooks(f(g(h())))`.
func (c *BuildTaskClient) Use(hooks ...Hook) {
	c.hooks.BuildTask = append(c.hooks.BuildTask, hooks...)
}

// Create returns a create builder for BuildTask.
func (c *BuildTaskClient) Create() *BuildTaskCreate {
	mutation := newBuildTaskMutation(c.config, OpCreate)
	return &BuildTaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for BuildTask.
func (c *BuildTaskClient) Update() *BuildTaskUpdate {
	mutation := newBuildTaskMutation(c.config, OpUpdate)
	return &BuildTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BuildTaskClient) UpdateOne(bt *BuildTask) *BuildTaskUpdateOne {
	mutation := newBuildTaskMutation(c.config, OpUpdateOne, withBuildTask(bt))
	return &BuildTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BuildTaskClient) UpdateOneID(id int) *BuildTaskUpdateOne {
	mutation := newBuildTaskMutation(c.config, OpUpdateOne, withBuildTaskID(id))
	return &BuildTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BuildTask.
func (c *BuildTaskClient) Delete() *BuildTaskDelete {
	mutation := newBuildTaskMutation(c.config, OpDelete)
	return &BuildTaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BuildTaskClient) DeleteOne(bt *BuildTask) *BuildTaskDeleteOne {
	return c.DeleteOneID(bt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BuildTaskClient) DeleteOneID(id int) *BuildTaskDeleteOne {
	builder := c.Delete().Where(buildtask.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BuildTaskDeleteOne{builder}
}

// Create returns a query builder for BuildTask.
func (c *BuildTaskClient) Query() *BuildTaskQuery {
	return &BuildTaskQuery{config: c.config}
}

// Get returns a BuildTask entity by its id.
func (c *BuildTaskClient) Get(ctx context.Context, id int) (*BuildTask, error) {
	return c.Query().Where(buildtask.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BuildTaskClient) GetX(ctx context.Context, id int) *BuildTask {
	bt, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return bt
}

// QueryImplant queries the Implant edge of a BuildTask.
func (c *BuildTaskClient) QueryImplant(bt *BuildTask) *ImplantQuery {
	query := &ImplantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := bt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(buildtask.Table, buildtask.FieldID, id),
			sqlgraph.To(implant.Table, implant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, buildtask.ImplantTable, buildtask.ImplantColumn),
		)
		fromV = sqlgraph.Neighbors(bt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryImplantProfile queries the ImplantProfile edge of a BuildTask.
func (c *BuildTaskClient) QueryImplantProfile(bt *BuildTask) *ImplantProfileQuery {
	query := &ImplantProfileQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := bt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(buildtask.Table, buildtask.FieldID, id),
			sqlgraph.To(implantprofile.Table, implantprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, buildtask.ImplantProfileTable, buildtask.ImplantProfileColumn),
		)
		fromV = sqlgraph.Neighbors(bt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BuildTaskClient) Hooks() []Hook {
	return c.hooks.BuildTask
}

// ImplantClient is a client for the Implant schema.
type ImplantClient struct {
	config
}

// NewImplantClient returns a client for the Implant from the given config.
func NewImplantClient(c config) *ImplantClient {
	return &ImplantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `implant.Hooks(f(g(h())))`.
func (c *ImplantClient) Use(hooks ...Hook) {
	c.hooks.Implant = append(c.hooks.Implant, hooks...)
}

// Create returns a create builder for Implant.
func (c *ImplantClient) Create() *ImplantCreate {
	mutation := newImplantMutation(c.config, OpCreate)
	return &ImplantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Implant.
func (c *ImplantClient) Update() *ImplantUpdate {
	mutation := newImplantMutation(c.config, OpUpdate)
	return &ImplantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ImplantClient) UpdateOne(i *Implant) *ImplantUpdateOne {
	mutation := newImplantMutation(c.config, OpUpdateOne, withImplant(i))
	return &ImplantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ImplantClient) UpdateOneID(id int) *ImplantUpdateOne {
	mutation := newImplantMutation(c.config, OpUpdateOne, withImplantID(id))
	return &ImplantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Implant.
func (c *ImplantClient) Delete() *ImplantDelete {
	mutation := newImplantMutation(c.config, OpDelete)
	return &ImplantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ImplantClient) DeleteOne(i *Implant) *ImplantDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ImplantClient) DeleteOneID(id int) *ImplantDeleteOne {
	builder := c.Delete().Where(implant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ImplantDeleteOne{builder}
}

// Create returns a query builder for Implant.
func (c *ImplantClient) Query() *ImplantQuery {
	return &ImplantQuery{config: c.config}
}

// Get returns a Implant entity by its id.
func (c *ImplantClient) Get(ctx context.Context, id int) (*Implant, error) {
	return c.Query().Where(implant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ImplantClient) GetX(ctx context.Context, id int) *Implant {
	i, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return i
}

// Hooks returns the client hooks.
func (c *ImplantClient) Hooks() []Hook {
	return c.hooks.Implant
}

// ImplantProfileClient is a client for the ImplantProfile schema.
type ImplantProfileClient struct {
	config
}

// NewImplantProfileClient returns a client for the ImplantProfile from the given config.
func NewImplantProfileClient(c config) *ImplantProfileClient {
	return &ImplantProfileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `implantprofile.Hooks(f(g(h())))`.
func (c *ImplantProfileClient) Use(hooks ...Hook) {
	c.hooks.ImplantProfile = append(c.hooks.ImplantProfile, hooks...)
}

// Create returns a create builder for ImplantProfile.
func (c *ImplantProfileClient) Create() *ImplantProfileCreate {
	mutation := newImplantProfileMutation(c.config, OpCreate)
	return &ImplantProfileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for ImplantProfile.
func (c *ImplantProfileClient) Update() *ImplantProfileUpdate {
	mutation := newImplantProfileMutation(c.config, OpUpdate)
	return &ImplantProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ImplantProfileClient) UpdateOne(ip *ImplantProfile) *ImplantProfileUpdateOne {
	mutation := newImplantProfileMutation(c.config, OpUpdateOne, withImplantProfile(ip))
	return &ImplantProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ImplantProfileClient) UpdateOneID(id int) *ImplantProfileUpdateOne {
	mutation := newImplantProfileMutation(c.config, OpUpdateOne, withImplantProfileID(id))
	return &ImplantProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ImplantProfile.
func (c *ImplantProfileClient) Delete() *ImplantProfileDelete {
	mutation := newImplantProfileMutation(c.config, OpDelete)
	return &ImplantProfileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ImplantProfileClient) DeleteOne(ip *ImplantProfile) *ImplantProfileDeleteOne {
	return c.DeleteOneID(ip.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ImplantProfileClient) DeleteOneID(id int) *ImplantProfileDeleteOne {
	builder := c.Delete().Where(implantprofile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ImplantProfileDeleteOne{builder}
}

// Create returns a query builder for ImplantProfile.
func (c *ImplantProfileClient) Query() *ImplantProfileQuery {
	return &ImplantProfileQuery{config: c.config}
}

// Get returns a ImplantProfile entity by its id.
func (c *ImplantProfileClient) Get(ctx context.Context, id int) (*ImplantProfile, error) {
	return c.Query().Where(implantprofile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ImplantProfileClient) GetX(ctx context.Context, id int) *ImplantProfile {
	ip, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ip
}

// Hooks returns the client hooks.
func (c *ImplantProfileClient) Hooks() []Hook {
	return c.hooks.ImplantProfile
}
