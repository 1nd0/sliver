// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/bishopfox/sliver/server/db/ent/implantconfig"
	"github.com/bishopfox/sliver/server/db/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ImplantConfigQuery is the builder for querying ImplantConfig entities.
type ImplantConfigQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.ImplantConfig
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (icq *ImplantConfigQuery) Where(ps ...predicate.ImplantConfig) *ImplantConfigQuery {
	icq.predicates = append(icq.predicates, ps...)
	return icq
}

// Limit adds a limit step to the query.
func (icq *ImplantConfigQuery) Limit(limit int) *ImplantConfigQuery {
	icq.limit = &limit
	return icq
}

// Offset adds an offset step to the query.
func (icq *ImplantConfigQuery) Offset(offset int) *ImplantConfigQuery {
	icq.offset = &offset
	return icq
}

// Order adds an order step to the query.
func (icq *ImplantConfigQuery) Order(o ...OrderFunc) *ImplantConfigQuery {
	icq.order = append(icq.order, o...)
	return icq
}

// First returns the first ImplantConfig entity in the query. Returns *NotFoundError when no implantconfig was found.
func (icq *ImplantConfigQuery) First(ctx context.Context) (*ImplantConfig, error) {
	ics, err := icq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(ics) == 0 {
		return nil, &NotFoundError{implantconfig.Label}
	}
	return ics[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (icq *ImplantConfigQuery) FirstX(ctx context.Context) *ImplantConfig {
	ic, err := icq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return ic
}

// FirstID returns the first ImplantConfig id in the query. Returns *NotFoundError when no id was found.
func (icq *ImplantConfigQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = icq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{implantconfig.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (icq *ImplantConfigQuery) FirstXID(ctx context.Context) int {
	id, err := icq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only ImplantConfig entity in the query, returns an error if not exactly one entity was returned.
func (icq *ImplantConfigQuery) Only(ctx context.Context) (*ImplantConfig, error) {
	ics, err := icq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(ics) {
	case 1:
		return ics[0], nil
	case 0:
		return nil, &NotFoundError{implantconfig.Label}
	default:
		return nil, &NotSingularError{implantconfig.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (icq *ImplantConfigQuery) OnlyX(ctx context.Context) *ImplantConfig {
	ic, err := icq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return ic
}

// OnlyID returns the only ImplantConfig id in the query, returns an error if not exactly one id was returned.
func (icq *ImplantConfigQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = icq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{implantconfig.Label}
	default:
		err = &NotSingularError{implantconfig.Label}
	}
	return
}

// OnlyXID is like OnlyID, but panics if an error occurs.
func (icq *ImplantConfigQuery) OnlyXID(ctx context.Context) int {
	id, err := icq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ImplantConfigs.
func (icq *ImplantConfigQuery) All(ctx context.Context) ([]*ImplantConfig, error) {
	if err := icq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return icq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (icq *ImplantConfigQuery) AllX(ctx context.Context) []*ImplantConfig {
	ics, err := icq.All(ctx)
	if err != nil {
		panic(err)
	}
	return ics
}

// IDs executes the query and returns a list of ImplantConfig ids.
func (icq *ImplantConfigQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := icq.Select(implantconfig.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (icq *ImplantConfigQuery) IDsX(ctx context.Context) []int {
	ids, err := icq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (icq *ImplantConfigQuery) Count(ctx context.Context) (int, error) {
	if err := icq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return icq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (icq *ImplantConfigQuery) CountX(ctx context.Context) int {
	count, err := icq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (icq *ImplantConfigQuery) Exist(ctx context.Context) (bool, error) {
	if err := icq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return icq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (icq *ImplantConfigQuery) ExistX(ctx context.Context) bool {
	exist, err := icq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (icq *ImplantConfigQuery) Clone() *ImplantConfigQuery {
	return &ImplantConfigQuery{
		config:     icq.config,
		limit:      icq.limit,
		offset:     icq.offset,
		order:      append([]OrderFunc{}, icq.order...),
		unique:     append([]string{}, icq.unique...),
		predicates: append([]predicate.ImplantConfig{}, icq.predicates...),
		// clone intermediate query.
		sql:  icq.sql.Clone(),
		path: icq.path,
	}
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (icq *ImplantConfigQuery) GroupBy(field string, fields ...string) *ImplantConfigGroupBy {
	group := &ImplantConfigGroupBy{config: icq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := icq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return icq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
func (icq *ImplantConfigQuery) Select(field string, fields ...string) *ImplantConfigSelect {
	selector := &ImplantConfigSelect{config: icq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := icq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return icq.sqlQuery(), nil
	}
	return selector
}

func (icq *ImplantConfigQuery) prepareQuery(ctx context.Context) error {
	if icq.path != nil {
		prev, err := icq.path(ctx)
		if err != nil {
			return err
		}
		icq.sql = prev
	}
	return nil
}

func (icq *ImplantConfigQuery) sqlAll(ctx context.Context) ([]*ImplantConfig, error) {
	var (
		nodes = []*ImplantConfig{}
		_spec = icq.querySpec()
	)
	_spec.ScanValues = func() []interface{} {
		node := &ImplantConfig{config: icq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, icq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (icq *ImplantConfigQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := icq.querySpec()
	return sqlgraph.CountNodes(ctx, icq.driver, _spec)
}

func (icq *ImplantConfigQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := icq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (icq *ImplantConfigQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   implantconfig.Table,
			Columns: implantconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: implantconfig.FieldID,
			},
		},
		From:   icq.sql,
		Unique: true,
	}
	if ps := icq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := icq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := icq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := icq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (icq *ImplantConfigQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(icq.driver.Dialect())
	t1 := builder.Table(implantconfig.Table)
	selector := builder.Select(t1.Columns(implantconfig.Columns...)...).From(t1)
	if icq.sql != nil {
		selector = icq.sql
		selector.Select(selector.Columns(implantconfig.Columns...)...)
	}
	for _, p := range icq.predicates {
		p(selector)
	}
	for _, p := range icq.order {
		p(selector)
	}
	if offset := icq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := icq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ImplantConfigGroupBy is the builder for group-by ImplantConfig entities.
type ImplantConfigGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (icgb *ImplantConfigGroupBy) Aggregate(fns ...AggregateFunc) *ImplantConfigGroupBy {
	icgb.fns = append(icgb.fns, fns...)
	return icgb
}

// Scan applies the group-by query and scan the result into the given value.
func (icgb *ImplantConfigGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := icgb.path(ctx)
	if err != nil {
		return err
	}
	icgb.sql = query
	return icgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (icgb *ImplantConfigGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := icgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (icgb *ImplantConfigGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(icgb.fields) > 1 {
		return nil, errors.New("ent: ImplantConfigGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := icgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (icgb *ImplantConfigGroupBy) StringsX(ctx context.Context) []string {
	v, err := icgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (icgb *ImplantConfigGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(icgb.fields) > 1 {
		return nil, errors.New("ent: ImplantConfigGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := icgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (icgb *ImplantConfigGroupBy) IntsX(ctx context.Context) []int {
	v, err := icgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (icgb *ImplantConfigGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(icgb.fields) > 1 {
		return nil, errors.New("ent: ImplantConfigGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := icgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (icgb *ImplantConfigGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := icgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (icgb *ImplantConfigGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(icgb.fields) > 1 {
		return nil, errors.New("ent: ImplantConfigGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := icgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (icgb *ImplantConfigGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := icgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (icgb *ImplantConfigGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := icgb.sqlQuery().Query()
	if err := icgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (icgb *ImplantConfigGroupBy) sqlQuery() *sql.Selector {
	selector := icgb.sql
	columns := make([]string, 0, len(icgb.fields)+len(icgb.fns))
	columns = append(columns, icgb.fields...)
	for _, fn := range icgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(icgb.fields...)
}

// ImplantConfigSelect is the builder for select fields of ImplantConfig entities.
type ImplantConfigSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (ics *ImplantConfigSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := ics.path(ctx)
	if err != nil {
		return err
	}
	ics.sql = query
	return ics.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ics *ImplantConfigSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ics.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (ics *ImplantConfigSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ics.fields) > 1 {
		return nil, errors.New("ent: ImplantConfigSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ics.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ics *ImplantConfigSelect) StringsX(ctx context.Context) []string {
	v, err := ics.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (ics *ImplantConfigSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ics.fields) > 1 {
		return nil, errors.New("ent: ImplantConfigSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ics.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ics *ImplantConfigSelect) IntsX(ctx context.Context) []int {
	v, err := ics.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (ics *ImplantConfigSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ics.fields) > 1 {
		return nil, errors.New("ent: ImplantConfigSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ics.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ics *ImplantConfigSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ics.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (ics *ImplantConfigSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ics.fields) > 1 {
		return nil, errors.New("ent: ImplantConfigSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ics.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ics *ImplantConfigSelect) BoolsX(ctx context.Context) []bool {
	v, err := ics.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ics *ImplantConfigSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ics.sqlQuery().Query()
	if err := ics.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ics *ImplantConfigSelect) sqlQuery() sql.Querier {
	selector := ics.sql
	selector.Select(selector.Columns(ics.fields...)...)
	return selector
}
