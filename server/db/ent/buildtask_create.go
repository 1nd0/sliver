// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/bishopfox/sliver/server/db/ent/buildtask"
	"github.com/bishopfox/sliver/server/db/ent/implant"
	"github.com/bishopfox/sliver/server/db/ent/implantprofile"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// BuildTaskCreate is the builder for creating a BuildTask entity.
type BuildTaskCreate struct {
	config
	mutation *BuildTaskMutation
	hooks    []Hook
}

// SetStarted sets the Started field.
func (btc *BuildTaskCreate) SetStarted(t time.Time) *BuildTaskCreate {
	btc.mutation.SetStarted(t)
	return btc
}

// SetCompleted sets the Completed field.
func (btc *BuildTaskCreate) SetCompleted(t time.Time) *BuildTaskCreate {
	btc.mutation.SetCompleted(t)
	return btc
}

// AddImplantIDs adds the Implant edge to Implant by ids.
func (btc *BuildTaskCreate) AddImplantIDs(ids ...int) *BuildTaskCreate {
	btc.mutation.AddImplantIDs(ids...)
	return btc
}

// AddImplant adds the Implant edges to Implant.
func (btc *BuildTaskCreate) AddImplant(i ...*Implant) *BuildTaskCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return btc.AddImplantIDs(ids...)
}

// AddImplantProfileIDs adds the ImplantProfile edge to ImplantProfile by ids.
func (btc *BuildTaskCreate) AddImplantProfileIDs(ids ...int) *BuildTaskCreate {
	btc.mutation.AddImplantProfileIDs(ids...)
	return btc
}

// AddImplantProfile adds the ImplantProfile edges to ImplantProfile.
func (btc *BuildTaskCreate) AddImplantProfile(i ...*ImplantProfile) *BuildTaskCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return btc.AddImplantProfileIDs(ids...)
}

// Mutation returns the BuildTaskMutation object of the builder.
func (btc *BuildTaskCreate) Mutation() *BuildTaskMutation {
	return btc.mutation
}

// Save creates the BuildTask in the database.
func (btc *BuildTaskCreate) Save(ctx context.Context) (*BuildTask, error) {
	if _, ok := btc.mutation.Started(); !ok {
		return nil, &ValidationError{Name: "Started", err: errors.New("ent: missing required field \"Started\"")}
	}
	if _, ok := btc.mutation.Completed(); !ok {
		return nil, &ValidationError{Name: "Completed", err: errors.New("ent: missing required field \"Completed\"")}
	}
	var (
		err  error
		node *BuildTask
	)
	if len(btc.hooks) == 0 {
		node, err = btc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BuildTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			btc.mutation = mutation
			node, err = btc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(btc.hooks) - 1; i >= 0; i-- {
			mut = btc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, btc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (btc *BuildTaskCreate) SaveX(ctx context.Context) *BuildTask {
	v, err := btc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (btc *BuildTaskCreate) sqlSave(ctx context.Context) (*BuildTask, error) {
	var (
		bt    = &BuildTask{config: btc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: buildtask.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: buildtask.FieldID,
			},
		}
	)
	if value, ok := btc.mutation.Started(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: buildtask.FieldStarted,
		})
		bt.Started = value
	}
	if value, ok := btc.mutation.Completed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: buildtask.FieldCompleted,
		})
		bt.Completed = value
	}
	if nodes := btc.mutation.ImplantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   buildtask.ImplantTable,
			Columns: []string{buildtask.ImplantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := btc.mutation.ImplantProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   buildtask.ImplantProfileTable,
			Columns: []string{buildtask.ImplantProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantprofile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, btc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	bt.ID = int(id)
	return bt, nil
}
