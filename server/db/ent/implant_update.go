// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/bishopfox/sliver/server/db/ent/implant"
	"github.com/bishopfox/sliver/server/db/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ImplantUpdate is the builder for updating Implant entities.
type ImplantUpdate struct {
	config
	hooks      []Hook
	mutation   *ImplantMutation
	predicates []predicate.Implant
}

// Where adds a new predicate for the builder.
func (iu *ImplantUpdate) Where(ps ...predicate.Implant) *ImplantUpdate {
	iu.predicates = append(iu.predicates, ps...)
	return iu
}

// SetGOOS sets the GOOS field.
func (iu *ImplantUpdate) SetGOOS(s string) *ImplantUpdate {
	iu.mutation.SetGOOS(s)
	return iu
}

// SetGOARCH sets the GOARCH field.
func (iu *ImplantUpdate) SetGOARCH(s string) *ImplantUpdate {
	iu.mutation.SetGOARCH(s)
	return iu
}

// SetECCClientCert sets the ECC_ClientCert field.
func (iu *ImplantUpdate) SetECCClientCert(s string) *ImplantUpdate {
	iu.mutation.SetECCClientCert(s)
	return iu
}

// SetECCClientKey sets the ECC_ClientKey field.
func (iu *ImplantUpdate) SetECCClientKey(s string) *ImplantUpdate {
	iu.mutation.SetECCClientKey(s)
	return iu
}

// SetRSACert sets the RSA_Cert field.
func (iu *ImplantUpdate) SetRSACert(s string) *ImplantUpdate {
	iu.mutation.SetRSACert(s)
	return iu
}

// SetDebug sets the Debug field.
func (iu *ImplantUpdate) SetDebug(b bool) *ImplantUpdate {
	iu.mutation.SetDebug(b)
	return iu
}

// SetObfuscateSymbols sets the ObfuscateSymbols field.
func (iu *ImplantUpdate) SetObfuscateSymbols(b bool) *ImplantUpdate {
	iu.mutation.SetObfuscateSymbols(b)
	return iu
}

// SetReconnectInterval sets the ReconnectInterval field.
func (iu *ImplantUpdate) SetReconnectInterval(u uint32) *ImplantUpdate {
	iu.mutation.ResetReconnectInterval()
	iu.mutation.SetReconnectInterval(u)
	return iu
}

// AddReconnectInterval adds u to ReconnectInterval.
func (iu *ImplantUpdate) AddReconnectInterval(u uint32) *ImplantUpdate {
	iu.mutation.AddReconnectInterval(u)
	return iu
}

// SetMaxConnectionErrors sets the MaxConnectionErrors field.
func (iu *ImplantUpdate) SetMaxConnectionErrors(u uint32) *ImplantUpdate {
	iu.mutation.ResetMaxConnectionErrors()
	iu.mutation.SetMaxConnectionErrors(u)
	return iu
}

// AddMaxConnectionErrors adds u to MaxConnectionErrors.
func (iu *ImplantUpdate) AddMaxConnectionErrors(u uint32) *ImplantUpdate {
	iu.mutation.AddMaxConnectionErrors(u)
	return iu
}

// SetLimitDomainJoined sets the LimitDomainJoined field.
func (iu *ImplantUpdate) SetLimitDomainJoined(b bool) *ImplantUpdate {
	iu.mutation.SetLimitDomainJoined(b)
	return iu
}

// SetLimitDatetime sets the LimitDatetime field.
func (iu *ImplantUpdate) SetLimitDatetime(i int64) *ImplantUpdate {
	iu.mutation.ResetLimitDatetime()
	iu.mutation.SetLimitDatetime(i)
	return iu
}

// AddLimitDatetime adds i to LimitDatetime.
func (iu *ImplantUpdate) AddLimitDatetime(i int64) *ImplantUpdate {
	iu.mutation.AddLimitDatetime(i)
	return iu
}

// SetLimitHostname sets the LimitHostname field.
func (iu *ImplantUpdate) SetLimitHostname(s string) *ImplantUpdate {
	iu.mutation.SetLimitHostname(s)
	return iu
}

// SetLimitUsername sets the LimitUsername field.
func (iu *ImplantUpdate) SetLimitUsername(s string) *ImplantUpdate {
	iu.mutation.SetLimitUsername(s)
	return iu
}

// SetOutputFormat sets the OutputFormat field.
func (iu *ImplantUpdate) SetOutputFormat(i int) *ImplantUpdate {
	iu.mutation.ResetOutputFormat()
	iu.mutation.SetOutputFormat(i)
	return iu
}

// AddOutputFormat adds i to OutputFormat.
func (iu *ImplantUpdate) AddOutputFormat(i int) *ImplantUpdate {
	iu.mutation.AddOutputFormat(i)
	return iu
}

// Mutation returns the ImplantMutation object of the builder.
func (iu *ImplantUpdate) Mutation() *ImplantMutation {
	return iu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (iu *ImplantUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(iu.hooks) == 0 {
		affected, err = iu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ImplantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iu.mutation = mutation
			affected, err = iu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iu.hooks) - 1; i >= 0; i-- {
			mut = iu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iu *ImplantUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *ImplantUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *ImplantUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *ImplantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   implant.Table,
			Columns: implant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: implant.FieldID,
			},
		},
	}
	if ps := iu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.GOOS(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implant.FieldGOOS,
		})
	}
	if value, ok := iu.mutation.GOARCH(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implant.FieldGOARCH,
		})
	}
	if value, ok := iu.mutation.ECCClientCert(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implant.FieldECCClientCert,
		})
	}
	if value, ok := iu.mutation.ECCClientKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implant.FieldECCClientKey,
		})
	}
	if value, ok := iu.mutation.RSACert(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implant.FieldRSACert,
		})
	}
	if value, ok := iu.mutation.Debug(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: implant.FieldDebug,
		})
	}
	if value, ok := iu.mutation.ObfuscateSymbols(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: implant.FieldObfuscateSymbols,
		})
	}
	if value, ok := iu.mutation.ReconnectInterval(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: implant.FieldReconnectInterval,
		})
	}
	if value, ok := iu.mutation.AddedReconnectInterval(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: implant.FieldReconnectInterval,
		})
	}
	if value, ok := iu.mutation.MaxConnectionErrors(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: implant.FieldMaxConnectionErrors,
		})
	}
	if value, ok := iu.mutation.AddedMaxConnectionErrors(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: implant.FieldMaxConnectionErrors,
		})
	}
	if value, ok := iu.mutation.LimitDomainJoined(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: implant.FieldLimitDomainJoined,
		})
	}
	if value, ok := iu.mutation.LimitDatetime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: implant.FieldLimitDatetime,
		})
	}
	if value, ok := iu.mutation.AddedLimitDatetime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: implant.FieldLimitDatetime,
		})
	}
	if value, ok := iu.mutation.LimitHostname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implant.FieldLimitHostname,
		})
	}
	if value, ok := iu.mutation.LimitUsername(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implant.FieldLimitUsername,
		})
	}
	if value, ok := iu.mutation.OutputFormat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: implant.FieldOutputFormat,
		})
	}
	if value, ok := iu.mutation.AddedOutputFormat(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: implant.FieldOutputFormat,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{implant.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ImplantUpdateOne is the builder for updating a single Implant entity.
type ImplantUpdateOne struct {
	config
	hooks    []Hook
	mutation *ImplantMutation
}

// SetGOOS sets the GOOS field.
func (iuo *ImplantUpdateOne) SetGOOS(s string) *ImplantUpdateOne {
	iuo.mutation.SetGOOS(s)
	return iuo
}

// SetGOARCH sets the GOARCH field.
func (iuo *ImplantUpdateOne) SetGOARCH(s string) *ImplantUpdateOne {
	iuo.mutation.SetGOARCH(s)
	return iuo
}

// SetECCClientCert sets the ECC_ClientCert field.
func (iuo *ImplantUpdateOne) SetECCClientCert(s string) *ImplantUpdateOne {
	iuo.mutation.SetECCClientCert(s)
	return iuo
}

// SetECCClientKey sets the ECC_ClientKey field.
func (iuo *ImplantUpdateOne) SetECCClientKey(s string) *ImplantUpdateOne {
	iuo.mutation.SetECCClientKey(s)
	return iuo
}

// SetRSACert sets the RSA_Cert field.
func (iuo *ImplantUpdateOne) SetRSACert(s string) *ImplantUpdateOne {
	iuo.mutation.SetRSACert(s)
	return iuo
}

// SetDebug sets the Debug field.
func (iuo *ImplantUpdateOne) SetDebug(b bool) *ImplantUpdateOne {
	iuo.mutation.SetDebug(b)
	return iuo
}

// SetObfuscateSymbols sets the ObfuscateSymbols field.
func (iuo *ImplantUpdateOne) SetObfuscateSymbols(b bool) *ImplantUpdateOne {
	iuo.mutation.SetObfuscateSymbols(b)
	return iuo
}

// SetReconnectInterval sets the ReconnectInterval field.
func (iuo *ImplantUpdateOne) SetReconnectInterval(u uint32) *ImplantUpdateOne {
	iuo.mutation.ResetReconnectInterval()
	iuo.mutation.SetReconnectInterval(u)
	return iuo
}

// AddReconnectInterval adds u to ReconnectInterval.
func (iuo *ImplantUpdateOne) AddReconnectInterval(u uint32) *ImplantUpdateOne {
	iuo.mutation.AddReconnectInterval(u)
	return iuo
}

// SetMaxConnectionErrors sets the MaxConnectionErrors field.
func (iuo *ImplantUpdateOne) SetMaxConnectionErrors(u uint32) *ImplantUpdateOne {
	iuo.mutation.ResetMaxConnectionErrors()
	iuo.mutation.SetMaxConnectionErrors(u)
	return iuo
}

// AddMaxConnectionErrors adds u to MaxConnectionErrors.
func (iuo *ImplantUpdateOne) AddMaxConnectionErrors(u uint32) *ImplantUpdateOne {
	iuo.mutation.AddMaxConnectionErrors(u)
	return iuo
}

// SetLimitDomainJoined sets the LimitDomainJoined field.
func (iuo *ImplantUpdateOne) SetLimitDomainJoined(b bool) *ImplantUpdateOne {
	iuo.mutation.SetLimitDomainJoined(b)
	return iuo
}

// SetLimitDatetime sets the LimitDatetime field.
func (iuo *ImplantUpdateOne) SetLimitDatetime(i int64) *ImplantUpdateOne {
	iuo.mutation.ResetLimitDatetime()
	iuo.mutation.SetLimitDatetime(i)
	return iuo
}

// AddLimitDatetime adds i to LimitDatetime.
func (iuo *ImplantUpdateOne) AddLimitDatetime(i int64) *ImplantUpdateOne {
	iuo.mutation.AddLimitDatetime(i)
	return iuo
}

// SetLimitHostname sets the LimitHostname field.
func (iuo *ImplantUpdateOne) SetLimitHostname(s string) *ImplantUpdateOne {
	iuo.mutation.SetLimitHostname(s)
	return iuo
}

// SetLimitUsername sets the LimitUsername field.
func (iuo *ImplantUpdateOne) SetLimitUsername(s string) *ImplantUpdateOne {
	iuo.mutation.SetLimitUsername(s)
	return iuo
}

// SetOutputFormat sets the OutputFormat field.
func (iuo *ImplantUpdateOne) SetOutputFormat(i int) *ImplantUpdateOne {
	iuo.mutation.ResetOutputFormat()
	iuo.mutation.SetOutputFormat(i)
	return iuo
}

// AddOutputFormat adds i to OutputFormat.
func (iuo *ImplantUpdateOne) AddOutputFormat(i int) *ImplantUpdateOne {
	iuo.mutation.AddOutputFormat(i)
	return iuo
}

// Mutation returns the ImplantMutation object of the builder.
func (iuo *ImplantUpdateOne) Mutation() *ImplantMutation {
	return iuo.mutation
}

// Save executes the query and returns the updated entity.
func (iuo *ImplantUpdateOne) Save(ctx context.Context) (*Implant, error) {
	var (
		err  error
		node *Implant
	)
	if len(iuo.hooks) == 0 {
		node, err = iuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ImplantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iuo.mutation = mutation
			node, err = iuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iuo.hooks) - 1; i >= 0; i-- {
			mut = iuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *ImplantUpdateOne) SaveX(ctx context.Context) *Implant {
	i, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return i
}

// Exec executes the query on the entity.
func (iuo *ImplantUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *ImplantUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *ImplantUpdateOne) sqlSave(ctx context.Context) (i *Implant, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   implant.Table,
			Columns: implant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: implant.FieldID,
			},
		},
	}
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Implant.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := iuo.mutation.GOOS(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implant.FieldGOOS,
		})
	}
	if value, ok := iuo.mutation.GOARCH(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implant.FieldGOARCH,
		})
	}
	if value, ok := iuo.mutation.ECCClientCert(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implant.FieldECCClientCert,
		})
	}
	if value, ok := iuo.mutation.ECCClientKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implant.FieldECCClientKey,
		})
	}
	if value, ok := iuo.mutation.RSACert(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implant.FieldRSACert,
		})
	}
	if value, ok := iuo.mutation.Debug(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: implant.FieldDebug,
		})
	}
	if value, ok := iuo.mutation.ObfuscateSymbols(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: implant.FieldObfuscateSymbols,
		})
	}
	if value, ok := iuo.mutation.ReconnectInterval(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: implant.FieldReconnectInterval,
		})
	}
	if value, ok := iuo.mutation.AddedReconnectInterval(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: implant.FieldReconnectInterval,
		})
	}
	if value, ok := iuo.mutation.MaxConnectionErrors(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: implant.FieldMaxConnectionErrors,
		})
	}
	if value, ok := iuo.mutation.AddedMaxConnectionErrors(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: implant.FieldMaxConnectionErrors,
		})
	}
	if value, ok := iuo.mutation.LimitDomainJoined(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: implant.FieldLimitDomainJoined,
		})
	}
	if value, ok := iuo.mutation.LimitDatetime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: implant.FieldLimitDatetime,
		})
	}
	if value, ok := iuo.mutation.AddedLimitDatetime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: implant.FieldLimitDatetime,
		})
	}
	if value, ok := iuo.mutation.LimitHostname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implant.FieldLimitHostname,
		})
	}
	if value, ok := iuo.mutation.LimitUsername(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implant.FieldLimitUsername,
		})
	}
	if value, ok := iuo.mutation.OutputFormat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: implant.FieldOutputFormat,
		})
	}
	if value, ok := iuo.mutation.AddedOutputFormat(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: implant.FieldOutputFormat,
		})
	}
	i = &Implant{config: iuo.config}
	_spec.Assign = i.assignValues
	_spec.ScanValues = i.scanValues()
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{implant.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return i, nil
}
