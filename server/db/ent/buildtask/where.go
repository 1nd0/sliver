// Code generated by entc, DO NOT EDIT.

package buildtask

import (
	"time"

	"github.com/bishopfox/sliver/server/db/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.BuildTask {
	return predicate.BuildTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BuildTask {
	return predicate.BuildTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BuildTask {
	return predicate.BuildTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BuildTask {
	return predicate.BuildTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BuildTask {
	return predicate.BuildTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BuildTask {
	return predicate.BuildTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BuildTask {
	return predicate.BuildTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BuildTask {
	return predicate.BuildTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BuildTask {
	return predicate.BuildTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Started applies equality check predicate on the "Started" field. It's identical to StartedEQ.
func Started(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStarted), v))
	})
}

// Completed applies equality check predicate on the "Completed" field. It's identical to CompletedEQ.
func Completed(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCompleted), v))
	})
}

// StartedEQ applies the EQ predicate on the "Started" field.
func StartedEQ(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStarted), v))
	})
}

// StartedNEQ applies the NEQ predicate on the "Started" field.
func StartedNEQ(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStarted), v))
	})
}

// StartedIn applies the In predicate on the "Started" field.
func StartedIn(vs ...time.Time) predicate.BuildTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BuildTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStarted), v...))
	})
}

// StartedNotIn applies the NotIn predicate on the "Started" field.
func StartedNotIn(vs ...time.Time) predicate.BuildTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BuildTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStarted), v...))
	})
}

// StartedGT applies the GT predicate on the "Started" field.
func StartedGT(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStarted), v))
	})
}

// StartedGTE applies the GTE predicate on the "Started" field.
func StartedGTE(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStarted), v))
	})
}

// StartedLT applies the LT predicate on the "Started" field.
func StartedLT(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStarted), v))
	})
}

// StartedLTE applies the LTE predicate on the "Started" field.
func StartedLTE(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStarted), v))
	})
}

// CompletedEQ applies the EQ predicate on the "Completed" field.
func CompletedEQ(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCompleted), v))
	})
}

// CompletedNEQ applies the NEQ predicate on the "Completed" field.
func CompletedNEQ(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCompleted), v))
	})
}

// CompletedIn applies the In predicate on the "Completed" field.
func CompletedIn(vs ...time.Time) predicate.BuildTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BuildTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCompleted), v...))
	})
}

// CompletedNotIn applies the NotIn predicate on the "Completed" field.
func CompletedNotIn(vs ...time.Time) predicate.BuildTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BuildTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCompleted), v...))
	})
}

// CompletedGT applies the GT predicate on the "Completed" field.
func CompletedGT(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCompleted), v))
	})
}

// CompletedGTE applies the GTE predicate on the "Completed" field.
func CompletedGTE(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCompleted), v))
	})
}

// CompletedLT applies the LT predicate on the "Completed" field.
func CompletedLT(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCompleted), v))
	})
}

// CompletedLTE applies the LTE predicate on the "Completed" field.
func CompletedLTE(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCompleted), v))
	})
}

// HasImplant applies the HasEdge predicate on the "Implant" edge.
func HasImplant() predicate.BuildTask {
	return predicate.BuildTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ImplantTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ImplantTable, ImplantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasImplantWith applies the HasEdge predicate on the "Implant" edge with a given conditions (other predicates).
func HasImplantWith(preds ...predicate.Implant) predicate.BuildTask {
	return predicate.BuildTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ImplantInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ImplantTable, ImplantColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasImplantProfile applies the HasEdge predicate on the "ImplantProfile" edge.
func HasImplantProfile() predicate.BuildTask {
	return predicate.BuildTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ImplantProfileTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ImplantProfileTable, ImplantProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasImplantProfileWith applies the HasEdge predicate on the "ImplantProfile" edge with a given conditions (other predicates).
func HasImplantProfileWith(preds ...predicate.ImplantProfile) predicate.BuildTask {
	return predicate.BuildTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ImplantProfileInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ImplantProfileTable, ImplantProfileColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.BuildTask) predicate.BuildTask {
	return predicate.BuildTask(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.BuildTask) predicate.BuildTask {
	return predicate.BuildTask(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BuildTask) predicate.BuildTask {
	return predicate.BuildTask(func(s *sql.Selector) {
		p(s.Not())
	})
}
