// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/bishopfox/sliver/server/db/ent/buildtask"
	"github.com/google/uuid"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBuildTask      = "BuildTask"
	TypeImplantConfig  = "ImplantConfig"
	TypeImplantProfile = "ImplantProfile"
)

// BuildTaskMutation represents an operation that mutate the BuildTasks
// nodes in the graph.
type BuildTaskMutation struct {
	config
	op            Op
	typ           string
	id            *int
	guid          *uuid.UUID
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*BuildTask, error)
}

var _ ent.Mutation = (*BuildTaskMutation)(nil)

// buildtaskOption allows to manage the mutation configuration using functional options.
type buildtaskOption func(*BuildTaskMutation)

// newBuildTaskMutation creates new mutation for $n.Name.
func newBuildTaskMutation(c config, op Op, opts ...buildtaskOption) *BuildTaskMutation {
	m := &BuildTaskMutation{
		config:        c,
		op:            op,
		typ:           TypeBuildTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBuildTaskID sets the id field of the mutation.
func withBuildTaskID(id int) buildtaskOption {
	return func(m *BuildTaskMutation) {
		var (
			err   error
			once  sync.Once
			value *BuildTask
		)
		m.oldValue = func(ctx context.Context) (*BuildTask, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BuildTask.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBuildTask sets the old BuildTask of the mutation.
func withBuildTask(node *BuildTask) buildtaskOption {
	return func(m *BuildTaskMutation) {
		m.oldValue = func(context.Context) (*BuildTask, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BuildTaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BuildTaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *BuildTaskMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetGUID sets the guid field.
func (m *BuildTaskMutation) SetGUID(u uuid.UUID) {
	m.guid = &u
}

// GUID returns the guid value in the mutation.
func (m *BuildTaskMutation) GUID() (r uuid.UUID, exists bool) {
	v := m.guid
	if v == nil {
		return
	}
	return *v, true
}

// OldGUID returns the old guid value of the BuildTask.
// If the BuildTask object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BuildTaskMutation) OldGUID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGUID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGUID: %w", err)
	}
	return oldValue.GUID, nil
}

// ResetGUID reset all changes of the "guid" field.
func (m *BuildTaskMutation) ResetGUID() {
	m.guid = nil
}

// Op returns the operation name.
func (m *BuildTaskMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (BuildTask).
func (m *BuildTaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *BuildTaskMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.guid != nil {
		fields = append(fields, buildtask.FieldGUID)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *BuildTaskMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case buildtask.FieldGUID:
		return m.GUID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *BuildTaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case buildtask.FieldGUID:
		return m.OldGUID(ctx)
	}
	return nil, fmt.Errorf("unknown BuildTask field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *BuildTaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	case buildtask.FieldGUID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGUID(v)
		return nil
	}
	return fmt.Errorf("unknown BuildTask field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *BuildTaskMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *BuildTaskMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *BuildTaskMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown BuildTask numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *BuildTaskMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *BuildTaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *BuildTaskMutation) ClearField(name string) error {
	return fmt.Errorf("unknown BuildTask nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *BuildTaskMutation) ResetField(name string) error {
	switch name {
	case buildtask.FieldGUID:
		m.ResetGUID()
		return nil
	}
	return fmt.Errorf("unknown BuildTask field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *BuildTaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *BuildTaskMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *BuildTaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *BuildTaskMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *BuildTaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *BuildTaskMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *BuildTaskMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown BuildTask unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *BuildTaskMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown BuildTask edge %s", name)
}

// ImplantConfigMutation represents an operation that mutate the ImplantConfigs
// nodes in the graph.
type ImplantConfigMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ImplantConfig, error)
}

var _ ent.Mutation = (*ImplantConfigMutation)(nil)

// implantconfigOption allows to manage the mutation configuration using functional options.
type implantconfigOption func(*ImplantConfigMutation)

// newImplantConfigMutation creates new mutation for $n.Name.
func newImplantConfigMutation(c config, op Op, opts ...implantconfigOption) *ImplantConfigMutation {
	m := &ImplantConfigMutation{
		config:        c,
		op:            op,
		typ:           TypeImplantConfig,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withImplantConfigID sets the id field of the mutation.
func withImplantConfigID(id int) implantconfigOption {
	return func(m *ImplantConfigMutation) {
		var (
			err   error
			once  sync.Once
			value *ImplantConfig
		)
		m.oldValue = func(ctx context.Context) (*ImplantConfig, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ImplantConfig.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withImplantConfig sets the old ImplantConfig of the mutation.
func withImplantConfig(node *ImplantConfig) implantconfigOption {
	return func(m *ImplantConfigMutation) {
		m.oldValue = func(context.Context) (*ImplantConfig, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ImplantConfigMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ImplantConfigMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ImplantConfigMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// Op returns the operation name.
func (m *ImplantConfigMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ImplantConfig).
func (m *ImplantConfigMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ImplantConfigMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ImplantConfigMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ImplantConfigMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown ImplantConfig field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ImplantConfigMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ImplantConfig field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ImplantConfigMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ImplantConfigMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ImplantConfigMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown ImplantConfig numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ImplantConfigMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ImplantConfigMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ImplantConfigMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ImplantConfig nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ImplantConfigMutation) ResetField(name string) error {
	return fmt.Errorf("unknown ImplantConfig field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ImplantConfigMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ImplantConfigMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ImplantConfigMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ImplantConfigMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ImplantConfigMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ImplantConfigMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ImplantConfigMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ImplantConfig unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ImplantConfigMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ImplantConfig edge %s", name)
}

// ImplantProfileMutation represents an operation that mutate the ImplantProfiles
// nodes in the graph.
type ImplantProfileMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ImplantProfile, error)
}

var _ ent.Mutation = (*ImplantProfileMutation)(nil)

// implantprofileOption allows to manage the mutation configuration using functional options.
type implantprofileOption func(*ImplantProfileMutation)

// newImplantProfileMutation creates new mutation for $n.Name.
func newImplantProfileMutation(c config, op Op, opts ...implantprofileOption) *ImplantProfileMutation {
	m := &ImplantProfileMutation{
		config:        c,
		op:            op,
		typ:           TypeImplantProfile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withImplantProfileID sets the id field of the mutation.
func withImplantProfileID(id int) implantprofileOption {
	return func(m *ImplantProfileMutation) {
		var (
			err   error
			once  sync.Once
			value *ImplantProfile
		)
		m.oldValue = func(ctx context.Context) (*ImplantProfile, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ImplantProfile.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withImplantProfile sets the old ImplantProfile of the mutation.
func withImplantProfile(node *ImplantProfile) implantprofileOption {
	return func(m *ImplantProfileMutation) {
		m.oldValue = func(context.Context) (*ImplantProfile, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ImplantProfileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ImplantProfileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ImplantProfileMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// Op returns the operation name.
func (m *ImplantProfileMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ImplantProfile).
func (m *ImplantProfileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ImplantProfileMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ImplantProfileMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ImplantProfileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown ImplantProfile field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ImplantProfileMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ImplantProfile field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ImplantProfileMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ImplantProfileMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ImplantProfileMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown ImplantProfile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ImplantProfileMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ImplantProfileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ImplantProfileMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ImplantProfile nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ImplantProfileMutation) ResetField(name string) error {
	return fmt.Errorf("unknown ImplantProfile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ImplantProfileMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ImplantProfileMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ImplantProfileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ImplantProfileMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ImplantProfileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ImplantProfileMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ImplantProfileMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ImplantProfile unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ImplantProfileMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ImplantProfile edge %s", name)
}
