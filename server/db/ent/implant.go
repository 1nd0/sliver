// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/bishopfox/sliver/server/db/ent/implant"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Implant is the model entity for the Implant schema.
type Implant struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// GOOS holds the value of the "GOOS" field.
	GOOS string `json:"GOOS,omitempty"`
	// GOARCH holds the value of the "GOARCH" field.
	GOARCH string `json:"GOARCH,omitempty"`
	// ECCClientCert holds the value of the "ECC_ClientCert" field.
	ECCClientCert string `json:"ECC_ClientCert,omitempty"`
	// ECCClientKey holds the value of the "ECC_ClientKey" field.
	ECCClientKey string `json:"ECC_ClientKey,omitempty"`
	// RSACert holds the value of the "RSA_Cert" field.
	RSACert string `json:"RSA_Cert,omitempty"`
	// Debug holds the value of the "Debug" field.
	Debug bool `json:"Debug,omitempty"`
	// ObfuscateSymbols holds the value of the "ObfuscateSymbols" field.
	ObfuscateSymbols bool `json:"ObfuscateSymbols,omitempty"`
	// ReconnectInterval holds the value of the "ReconnectInterval" field.
	ReconnectInterval uint32 `json:"ReconnectInterval,omitempty"`
	// MaxConnectionErrors holds the value of the "MaxConnectionErrors" field.
	MaxConnectionErrors uint32 `json:"MaxConnectionErrors,omitempty"`
	// LimitDomainJoined holds the value of the "LimitDomainJoined" field.
	LimitDomainJoined bool `json:"LimitDomainJoined,omitempty"`
	// LimitDatetime holds the value of the "LimitDatetime" field.
	LimitDatetime int64 `json:"LimitDatetime,omitempty"`
	// LimitHostname holds the value of the "LimitHostname" field.
	LimitHostname string `json:"LimitHostname,omitempty"`
	// LimitUsername holds the value of the "LimitUsername" field.
	LimitUsername string `json:"LimitUsername,omitempty"`
	// OutputFormat holds the value of the "OutputFormat" field.
	OutputFormat       int `json:"OutputFormat,omitempty"`
	build_task_implant *int
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Implant) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // GOOS
		&sql.NullString{}, // GOARCH
		&sql.NullString{}, // ECC_ClientCert
		&sql.NullString{}, // ECC_ClientKey
		&sql.NullString{}, // RSA_Cert
		&sql.NullBool{},   // Debug
		&sql.NullBool{},   // ObfuscateSymbols
		&sql.NullInt64{},  // ReconnectInterval
		&sql.NullInt64{},  // MaxConnectionErrors
		&sql.NullBool{},   // LimitDomainJoined
		&sql.NullInt64{},  // LimitDatetime
		&sql.NullString{}, // LimitHostname
		&sql.NullString{}, // LimitUsername
		&sql.NullInt64{},  // OutputFormat
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Implant) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // build_task_implant
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Implant fields.
func (i *Implant) assignValues(values ...interface{}) error {
	if m, n := len(values), len(implant.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	i.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field GOOS", values[0])
	} else if value.Valid {
		i.GOOS = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field GOARCH", values[1])
	} else if value.Valid {
		i.GOARCH = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field ECC_ClientCert", values[2])
	} else if value.Valid {
		i.ECCClientCert = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field ECC_ClientKey", values[3])
	} else if value.Valid {
		i.ECCClientKey = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field RSA_Cert", values[4])
	} else if value.Valid {
		i.RSACert = value.String
	}
	if value, ok := values[5].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field Debug", values[5])
	} else if value.Valid {
		i.Debug = value.Bool
	}
	if value, ok := values[6].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field ObfuscateSymbols", values[6])
	} else if value.Valid {
		i.ObfuscateSymbols = value.Bool
	}
	if value, ok := values[7].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field ReconnectInterval", values[7])
	} else if value.Valid {
		i.ReconnectInterval = uint32(value.Int64)
	}
	if value, ok := values[8].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field MaxConnectionErrors", values[8])
	} else if value.Valid {
		i.MaxConnectionErrors = uint32(value.Int64)
	}
	if value, ok := values[9].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field LimitDomainJoined", values[9])
	} else if value.Valid {
		i.LimitDomainJoined = value.Bool
	}
	if value, ok := values[10].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field LimitDatetime", values[10])
	} else if value.Valid {
		i.LimitDatetime = value.Int64
	}
	if value, ok := values[11].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field LimitHostname", values[11])
	} else if value.Valid {
		i.LimitHostname = value.String
	}
	if value, ok := values[12].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field LimitUsername", values[12])
	} else if value.Valid {
		i.LimitUsername = value.String
	}
	if value, ok := values[13].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field OutputFormat", values[13])
	} else if value.Valid {
		i.OutputFormat = int(value.Int64)
	}
	values = values[14:]
	if len(values) == len(implant.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field build_task_implant", value)
		} else if value.Valid {
			i.build_task_implant = new(int)
			*i.build_task_implant = int(value.Int64)
		}
	}
	return nil
}

// Update returns a builder for updating this Implant.
// Note that, you need to call Implant.Unwrap() before calling this method, if this Implant
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Implant) Update() *ImplantUpdateOne {
	return (&ImplantClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (i *Implant) Unwrap() *Implant {
	tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Implant is not a transactional entity")
	}
	i.config.driver = tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Implant) String() string {
	var builder strings.Builder
	builder.WriteString("Implant(")
	builder.WriteString(fmt.Sprintf("id=%v", i.ID))
	builder.WriteString(", GOOS=")
	builder.WriteString(i.GOOS)
	builder.WriteString(", GOARCH=")
	builder.WriteString(i.GOARCH)
	builder.WriteString(", ECC_ClientCert=")
	builder.WriteString(i.ECCClientCert)
	builder.WriteString(", ECC_ClientKey=")
	builder.WriteString(i.ECCClientKey)
	builder.WriteString(", RSA_Cert=")
	builder.WriteString(i.RSACert)
	builder.WriteString(", Debug=")
	builder.WriteString(fmt.Sprintf("%v", i.Debug))
	builder.WriteString(", ObfuscateSymbols=")
	builder.WriteString(fmt.Sprintf("%v", i.ObfuscateSymbols))
	builder.WriteString(", ReconnectInterval=")
	builder.WriteString(fmt.Sprintf("%v", i.ReconnectInterval))
	builder.WriteString(", MaxConnectionErrors=")
	builder.WriteString(fmt.Sprintf("%v", i.MaxConnectionErrors))
	builder.WriteString(", LimitDomainJoined=")
	builder.WriteString(fmt.Sprintf("%v", i.LimitDomainJoined))
	builder.WriteString(", LimitDatetime=")
	builder.WriteString(fmt.Sprintf("%v", i.LimitDatetime))
	builder.WriteString(", LimitHostname=")
	builder.WriteString(i.LimitHostname)
	builder.WriteString(", LimitUsername=")
	builder.WriteString(i.LimitUsername)
	builder.WriteString(", OutputFormat=")
	builder.WriteString(fmt.Sprintf("%v", i.OutputFormat))
	builder.WriteByte(')')
	return builder.String()
}

// Implants is a parsable slice of Implant.
type Implants []*Implant

func (i Implants) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
