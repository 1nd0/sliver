// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/bishopfox/sliver/server/db/ent/buildtask"
	"github.com/facebookincubator/ent/dialect/sql"
)

// BuildTask is the model entity for the BuildTask schema.
type BuildTask struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Started holds the value of the "Started" field.
	Started time.Time `json:"Started,omitempty"`
	// Completed holds the value of the "Completed" field.
	Completed time.Time `json:"Completed,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BuildTaskQuery when eager-loading is set.
	Edges BuildTaskEdges `json:"edges"`
}

// BuildTaskEdges holds the relations/edges for other nodes in the graph.
type BuildTaskEdges struct {
	// Implant holds the value of the Implant edge.
	Implant []*Implant
	// ImplantProfile holds the value of the ImplantProfile edge.
	ImplantProfile []*ImplantProfile
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ImplantOrErr returns the Implant value or an error if the edge
// was not loaded in eager-loading.
func (e BuildTaskEdges) ImplantOrErr() ([]*Implant, error) {
	if e.loadedTypes[0] {
		return e.Implant, nil
	}
	return nil, &NotLoadedError{edge: "Implant"}
}

// ImplantProfileOrErr returns the ImplantProfile value or an error if the edge
// was not loaded in eager-loading.
func (e BuildTaskEdges) ImplantProfileOrErr() ([]*ImplantProfile, error) {
	if e.loadedTypes[1] {
		return e.ImplantProfile, nil
	}
	return nil, &NotLoadedError{edge: "ImplantProfile"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BuildTask) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // Started
		&sql.NullTime{},  // Completed
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BuildTask fields.
func (bt *BuildTask) assignValues(values ...interface{}) error {
	if m, n := len(values), len(buildtask.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	bt.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field Started", values[0])
	} else if value.Valid {
		bt.Started = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field Completed", values[1])
	} else if value.Valid {
		bt.Completed = value.Time
	}
	return nil
}

// QueryImplant queries the Implant edge of the BuildTask.
func (bt *BuildTask) QueryImplant() *ImplantQuery {
	return (&BuildTaskClient{config: bt.config}).QueryImplant(bt)
}

// QueryImplantProfile queries the ImplantProfile edge of the BuildTask.
func (bt *BuildTask) QueryImplantProfile() *ImplantProfileQuery {
	return (&BuildTaskClient{config: bt.config}).QueryImplantProfile(bt)
}

// Update returns a builder for updating this BuildTask.
// Note that, you need to call BuildTask.Unwrap() before calling this method, if this BuildTask
// was returned from a transaction, and the transaction was committed or rolled back.
func (bt *BuildTask) Update() *BuildTaskUpdateOne {
	return (&BuildTaskClient{config: bt.config}).UpdateOne(bt)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (bt *BuildTask) Unwrap() *BuildTask {
	tx, ok := bt.config.driver.(*txDriver)
	if !ok {
		panic("ent: BuildTask is not a transactional entity")
	}
	bt.config.driver = tx.drv
	return bt
}

// String implements the fmt.Stringer.
func (bt *BuildTask) String() string {
	var builder strings.Builder
	builder.WriteString("BuildTask(")
	builder.WriteString(fmt.Sprintf("id=%v", bt.ID))
	builder.WriteString(", Started=")
	builder.WriteString(bt.Started.Format(time.ANSIC))
	builder.WriteString(", Completed=")
	builder.WriteString(bt.Completed.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BuildTasks is a parsable slice of BuildTask.
type BuildTasks []*BuildTask

func (bt BuildTasks) config(cfg config) {
	for _i := range bt {
		bt[_i].config = cfg
	}
}
