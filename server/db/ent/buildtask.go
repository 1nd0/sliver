// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/bishopfox/sliver/server/db/ent/buildtask"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/google/uuid"
)

// BuildTask is the model entity for the BuildTask schema.
type BuildTask struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// GUID holds the value of the "guid" field.
	GUID uuid.UUID `json:"guid,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BuildTask) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&uuid.UUID{},     // guid
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BuildTask fields.
func (bt *BuildTask) assignValues(values ...interface{}) error {
	if m, n := len(values), len(buildtask.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	bt.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field guid", values[0])
	} else if value != nil {
		bt.GUID = *value
	}
	return nil
}

// Update returns a builder for updating this BuildTask.
// Note that, you need to call BuildTask.Unwrap() before calling this method, if this BuildTask
// was returned from a transaction, and the transaction was committed or rolled back.
func (bt *BuildTask) Update() *BuildTaskUpdateOne {
	return (&BuildTaskClient{config: bt.config}).UpdateOne(bt)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (bt *BuildTask) Unwrap() *BuildTask {
	tx, ok := bt.config.driver.(*txDriver)
	if !ok {
		panic("ent: BuildTask is not a transactional entity")
	}
	bt.config.driver = tx.drv
	return bt
}

// String implements the fmt.Stringer.
func (bt *BuildTask) String() string {
	var builder strings.Builder
	builder.WriteString("BuildTask(")
	builder.WriteString(fmt.Sprintf("id=%v", bt.ID))
	builder.WriteString(", guid=")
	builder.WriteString(fmt.Sprintf("%v", bt.GUID))
	builder.WriteByte(')')
	return builder.String()
}

// BuildTasks is a parsable slice of BuildTask.
type BuildTasks []*BuildTask

func (bt BuildTasks) config(cfg config) {
	for _i := range bt {
		bt[_i].config = cfg
	}
}
